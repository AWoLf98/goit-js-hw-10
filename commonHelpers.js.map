{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst UPDATE_TIMER_INTERVAL = 1000;\n\nconst datetime_pickr = document.querySelector('input#datetime-picker');\nconst start = document.querySelector('button[data-start]');\n\nlet userSelectedDate = '';\n\nclass Timer {\n  static Timer(idInteval) {\n    this.idInteval = idInteval;\n  }\n\n  static startTimer() {\n    const timeLeft = Date.parse(userSelectedDate) - Date.now();\n    \n    if (timeLeft < 0) {\n      iziToast.show({\n        icon: 'fa-regular fa-circle-xmark',\n        close: false,\n        iconColor: '#fff',\n        position: 'topRight',\n        backgroundColor: '#EF4040',\n        progressBarColor: '#B51B1B',\n        messageColor: '#fff',\n        message: 'Please choose a date in the future',\n      });\n      return;\n    }\n\n    this.idInteval = setInterval(Timer.updateTimer, UPDATE_TIMER_INTERVAL);\n    console.log(this.idInteval)\n  }\n\n\n  static *convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n\n  static *addLeadingZero(value) {\n    return value.padStart(2, '0');\n  }\n\n  static updateTimer() {\n    console.log('Start interval');\n    console.log(Timer.idInteval);\n    // console.log(clearInterval(idInteval));\n    // if(timeLeft - UPDATE_TIMER_INTERVAL < 0) {\n    //   clearInterval(idInteval);\n    // }\n    // const { days, hours, minutes, seconds } = this.convertMs(timeLeft);\n    \n  }\n}\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    // console.log(selectedDates[0]);\n  },\n};\n\nconst datetime_flatpickr = flatpickr('input#datetime-picker', options);\n\nstart.addEventListener('click', Timer.startTimer);\n\n"],"names":["UPDATE_TIMER_INTERVAL","start","userSelectedDate","Timer","idInteval","iziToast","ms","days","hours","minutes","seconds","value","options","selectedDates","flatpickr"],"mappings":"2xBAMA,MAAMA,EAAwB,IAEP,SAAS,cAAc,uBAAuB,EACrE,MAAMC,EAAQ,SAAS,cAAc,oBAAoB,EAEzD,IAAIC,EAAmB,GAEvB,MAAMC,CAAM,CACV,OAAO,MAAMC,EAAW,CACtB,KAAK,UAAYA,CAClB,CAED,OAAO,YAAa,CAGlB,GAFiB,KAAK,MAAMF,CAAgB,EAAI,KAAK,MAEtC,EAAG,CAChBG,EAAS,KAAK,CACZ,KAAM,6BACN,MAAO,GACP,UAAW,OACX,SAAU,WACV,gBAAiB,UACjB,iBAAkB,UAClB,aAAc,OACd,QAAS,oCACjB,CAAO,EACD,MACD,CAED,KAAK,UAAY,YAAYF,EAAM,YAAaH,CAAqB,EACrE,QAAQ,IAAI,KAAK,SAAS,CAC3B,CAGD,OAAQ,UAAUM,EAAI,CAQpB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,OAAQ,eAAeC,EAAO,CAC5B,OAAOA,EAAM,SAAS,EAAG,GAAG,CAC7B,CAED,OAAO,aAAc,CACnB,QAAQ,IAAI,gBAAgB,EAC5B,QAAQ,IAAIR,EAAM,SAAS,CAO5B,CACH,CAEA,MAAMS,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBX,EAAmBW,EAAc,CAAC,CAEnC,CACH,EAE2BC,EAAU,wBAAyBF,CAAO,EAErEX,EAAM,iBAAiB,QAASE,EAAM,UAAU"}